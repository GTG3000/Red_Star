import re
from io import BytesIO
from urllib import request
from mimetypes import guess_type
from plugin_manager import BasePlugin
from utils import split_message, respond, Command

class InfoChannelManager(BasePlugin):
    name = "info_channel_manager"
    default_config = {
        "info_channel": "CHANNEL ID HERE",
        "info_file": "config/info.txt"
    }

    @Command("update_info_channel",
             doc="Updates the info channel with the given text file.",
             perms={"manage_server"},
             category="info")
    async def _update_info_channel(self, data):
        # ensure we have all the info we need
        chan = self.client.get_channel(self.plugin_config.info_channel)
        file = None
        if not chan:
            await respond(self.client, data, "**NEGATIVE. Info channel is not configured.**")
            return
        if self.plugin_config.info_file:
            try:
                with open(self.plugin_config.info_file, "rb") as f:
                    file = f.read().decode("utf-8")
            except FileNotFoundError:
                await respond(self.client, data, "**NEGATIVE. Info file does not exist.**")
                return
        else:
            await respond(self.client, data, "**NEGATIVE. Info file is not configured.**")
            return
        # fetch the old messages in the channel
        logs = self.client.logs_from(chan, limit=100)
        async for msg in logs:
            await self.client.delete_message(msg)
        # replace, with some parsing done to account for images
        msgs = file.splitlines()
        images = []
        final = []
        last_match = 0
        for i, msg in enumerate(msgs):
            ma = re.match(r"<(.+?)>", msg)
            if ma:
                final += split_message("\n".join(msgs[last_match:i]), splitter="\n")
                final.append(None)
                images.append(ma.group(1))
                last_match = i + 1
        final += split_message("\n".join(msgs[last_match:]), splitter="\n")
        final = [x for x in final if x != ""]
        for msg in final:
            if msg:
                await self.client.send_message(chan, msg)
            else:
                fp = images.pop(0)
                await self.client.send_file(chan, fp, filename=url)
        await respond(self.client, data, f"**ANALYSIS: {chan.mention} updated successfully.**")
